Fibonacci Calculator Application
A multi-container application for calculating Fibonacci numbers. This project demonstrates a full-stack application with multiple services working together through Docker containerization.

Architecture
The application consists of multiple services:

Client: React frontend
Server: FastAPI backend
Worker: Python process for calculating Fibonacci numbers
Redis: In-memory database for storing calculation results
PostgreSQL: Persistent database for storing submitted indices
Nginx: Web server for routing requests between client and server
Features
Calculate Fibonacci numbers for a given index
View previously calculated values
Store calculation history in a persistent database
Real-time calculation updates using Redis pub/sub
Technologies Used
Frontend: React.js, React Router
Backend: FastAPI (Python)
Databases: PostgreSQL, Redis
Containerization: Docker, Docker Compose
Web Server: Nginx
Getting Started
Prerequisites
Docker
Docker Compose
Running the Application
Clone this repository
Navigate to the project root directory
Run the application using Docker Compose:
bash
docker-compose up
The application will be available at http://localhost:3050

Development Mode
The application includes development configurations for hot-reloading:

bash
docker-compose up
Changes to code will automatically trigger rebuilds due to the volume mappings and development configurations.

Service Details
Client (React Frontend)
Uses Create React App
Includes React Router for navigation
Communicates with the API via Axios
Server (FastAPI Backend)
Provides API endpoints for:
Retrieving all submitted indices
Retrieving current calculation results
Submitting new indices for calculation
Connects to PostgreSQL for persistent storage
Publishes new indices to Redis for worker processing
Worker
Subscribes to Redis channel for new calculation requests
Calculates Fibonacci numbers using a recursive algorithm
Stores calculation results back in Redis
Nginx
Routes requests between client and server
Handles WebSocket connections for development hot-reloading
API Endpoints
GET /api/values/all: Get all indices that have been submitted
GET /api/values/current: Get calculated values for all indices
POST /api/values: Submit a new index for calculation
Project Structure
.
├── client/                  # React frontend
├── nginx/                   # Nginx configuration
├── server/                  # FastAPI backend
├── worker/                  # Fibonacci calculation worker
├── .dockerignore            # Docker ignore file
└── docker-compose.yml       # Docker Compose configuration
Notes
For production deployment, consider updating the Dockerfiles to use production configurations
The worker uses a recursive Fibonacci algorithm which is inefficient for large indices (limited to max index of 40)
The development setup includes file watching and hot-reloading for improved developer experience
License
This project is open source and available under the MIT License.

